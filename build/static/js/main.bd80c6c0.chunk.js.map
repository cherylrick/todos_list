{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","reducers/todo.reducer.js","context/todos.context.js","hooks/useLocalStorageReducer.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","value","setValue","e","target","reducer","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","useReducer","JSON","parse","window","localStorage","getItem","String","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","children","EditTodoForm","toggleEditForm","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","Todo","useToggleState","isEditing","toggle","ListItem","component","height","Checkbox","tabIndex","checked","onClick","textDecoration","ListItemSecondaryAction","IconButton","aria-label","memo","TodoList","length","Paper","List","i","Fragment","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd80c6c0.chunk.js","sourcesContent":["import { useState } from \"react\";\nfunction useToggle(initialVal = false) {\n  // call useState, \"reserve piece of state\"\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  // return piece of state AND a function to toggle it\n  return [state, toggle];\n}\nexport default useToggle;\n","import { useState } from \"react\";\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue(\"\");\n  };\n  return [value, handleChange, reset];\n};\n","import uuid from \"uuid\";\n\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case \"ADD\":\n            return [...state, { id: uuid(), task: action.task, completed: false }];\n        case \"REMOVE\":\n            return state.filter(todo => todo.id !== action.id);   \n        case \"TOGGLE\":\n            return state.map(todo =>\n                todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n            );\n        case \"EDIT\":\n            return state.map(todo =>\n                todo.id === action.id ? { ...todo, task: action.newTask } : todo\n            );\n        default:\n            return state;    \n    }\n};\n\nexport default reducer;\n\n\n\n\n/*\naddTodo: newTodoText => {\n    setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n  },\n  removeTodo: todoId => {\n    //filter out removed todo\n    const updatedTodos = todos.filter(todo => todo.id !== todoId);\n    //call setTodos with new todos array\n    setTodos(updatedTodos);\n  },\n  toggleTodo: todoId => {\n    const updatedTodos = todos.map(todo =>\n      todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n    );\n    setTodos(updatedTodos);\n  },\n  editTodo: (todoId, newTask) => {\n    const updatedTodos = todos.map(todo =>\n      todo.id === todoId ? { ...todo, task: newTask } : todo\n    );\n    setTodos(updatedTodos);\n  }\n\n  */","// todos\n// all methods to interact w/ todos\nimport React, { createContext } from \"react\";\nimport { useLocalStorageReducer } from \"../hooks/useLocalStorageReducer\";\nimport todoReducer from '../reducers/todo.reducer.js';\n\nconst defaultTodos = [\n    { id: 1, task: \"Mow the lawn using goats\", completed: false },\n    { id: 2, task: \"Release lady bugs into garden\", completed: true }\n];\n\nexport const TodosContext = createContext();\nexport const DispatchContext = createContext();\n\nexport function TodosProvider(props) {\n    const [todos, dispatch] = useLocalStorageReducer(\n        \"todos\",\n        defaultTodos,\n        todoReducer\n    );\n\n    return (\n        <TodosContext.Provider value={ todos }>\n            <DispatchContext.Provider value={dispatch}>\n                {props.children}\n            </DispatchContext.Provider>\n        </TodosContext.Provider>\n    );\n}","import { useReducer, useEffect } from \"react\";\nfunction useLocalStorageReducer(key, defaultVal, reducer) {\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\n    let value;\n    try {\n      value = JSON.parse(\n        window.localStorage.getItem(key) || String(defaultVal)\n      );\n    } catch (e) {\n      value = defaultVal;\n    }\n    return value;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state]);\n  return [state, dispatch];\n}\nexport { useLocalStorageReducer };\n","import React, { useContext } from \"react\";\nimport useInputState from \"./hooks/useInputState\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { DispatchContext } from './context/todos.context';\n\nfunction EditTodoForm({ id, task, toggleEditForm }) {\n  const dispatch = useContext(DispatchContext);\n  const [value, handleChange, reset] = useInputState(task);\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault();\n        dispatch({type: \"EDIT\", id: id, newTask: value});\n        reset();\n        toggleEditForm();\n      }}\n      style={{ marginLeft: \"1rem\", width: \"50%\" }}\n    >\n      <TextField\n        margin='normal'\n        value={value}\n        onChange={handleChange}\n        fullWidth\n        autoFocus\n      />\n    </form>\n  );\n}\nexport default EditTodoForm;\n","import React, { useContext, memo } from \"react\";\nimport useToggleState from \"./hooks/useToggleState\";\nimport EditTodoForm from \"./EditTodoForm\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItem\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { DispatchContext } from './context/todos.context';\n\nfunction Todo({ id, task, completed }) {\n  const dispatch = useContext(DispatchContext);\n  const [isEditing, toggle] = useToggleState(false);\n  \n  return (\n    <ListItem component=\"div\" style={{ height: \"64px\" }}>\n      {isEditing ? (\n        <EditTodoForm\n          id={id}\n          task={task}\n          toggleEditForm={toggle}\n        />\n      ) : (\n        <>\n          <Checkbox\n            tabIndex={-1}\n            checked={completed}\n            onClick={() => dispatch({type: \"TOGGLE\", id: id})}\n          />\n          <ListItemText\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\n          >\n            {task}\n          </ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton aria-label='Delete' onClick={() => dispatch({type: \"REMOVE\", id: id})}>\n              <DeleteIcon />\n            </IconButton>\n            <IconButton aria-label='Edit' onClick={toggle}>\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </>\n      )}\n    </ListItem>\n  );\n}\n\nexport default memo(Todo);\n","import React, { useContext } from \"react\";\nimport Todo from \"./Todo\";\nimport Paper from \"@material-ui/core/Paper\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport { TodosContext } from './context/todos.context';\n\nfunction TodoList() {\n  const todos = useContext(TodosContext);\n  if (todos.length)\n    return (\n      <Paper>\n        <List>\n          {todos.map((todo, i) => (\n            // To add a key to a fragment, we have to use the long-hand version\n            // rather than <> </>, we have to use <React.Fragment>\n            <React.Fragment key={i}>\n              <Todo\n                {...todo}\n                key={todo.id}\n              />\n              {i < todos.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    );\n  return null;\n}\nexport default TodoList;\n","import React, { useContext } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Paper from \"@material-ui/core/Paper\";\nimport useInputState from \"./hooks/useInputState\";\nimport { DispatchContext } from './context/todos.context';\n\nfunction TodoForm() {\n  const [value, handleChange, reset] = useInputState(\"\");\n  const dispatch = useContext(DispatchContext);\n  return (\n    <Paper style={{ margin: \"1rem 0\", padding: \"0 1rem\" }}>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          dispatch({type: \"ADD\", task: value});\n          reset();\n        }}\n      >\n        <TextField\n          value={value}\n          onChange={handleChange}\n          margin='normal'\n          label='Add New Todo'\n          fullWidth\n        />\n      </form>\n    </Paper>\n  );\n}\nexport default TodoForm;\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport TodoForm from \"./TodoForm\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { TodosProvider } from \"./context/todos.context\";\n\nfunction TodoApp() {\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n      <AppBar color='primary' position='static' style={{ height: \"64px\" }}>\n        <Toolbar>\n          <Typography color='inherit'>TODOS WITH HOOKS</Typography>\n        </Toolbar>\n      </AppBar>\n      <Grid container justify='center' style={{ marginTop: \"1rem\" }}>\n        <Grid item xs={11} md={8} lg={4}>\n          <TodosProvider>\n            <TodoForm />\n            <TodoList />\n          </TodosProvider>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\nexport default TodoApp;\n","import React from \"react\";\nimport TodoApp from \"./TodoApp\";\n\nfunction App() {\n  return <TodoApp />;\n}\n\nexport default App;\n\n// https://www.udemy.com/course/modern-react-bootcamp/learn/lecture/14541216#questions/9496842\n/*\nDaniel Maixner\nDaniel\n8 months ago\n2\nIt's not my favorite solution, but if you go to the index.js file and remove the <React.Strictmode>\n\ntags wrapping the <App /> tag, it will stop the error message. I believe the problem is something Google will need to resolve in all of their components.\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}